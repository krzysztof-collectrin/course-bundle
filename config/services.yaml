# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    provider_config_path: '%kernel.project_dir%/config/providers/provider_config.json'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    CourseBundle\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Recommendation/Domain/Entity/'
            - '../src/Recommendation/Domain/ValueObject/'
            - '../src/User/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    CourseBundle\Recommendation\Infrastructure\Provider\ProviderConfigLoader:
        arguments:
            $filePath: '%provider_config_path%'

    CourseBundle\Recommendation\Infrastructure\Symfony\Logging\AddRequestIdProcessor:
        tags:
            - { name: monolog.processor }

    CourseBundle\Shared\Security\UserDataFromJWTListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.request', method: 'onKernelRequest', priority: 7 }
    CourseBundle\Shared\Security\JWTCreatedListener:
        tags:
            - { name: 'kernel.event_listener', event: 'lexik_jwt_authentication.on_jwt_created', method: 'onJWTCreated' }

    CourseBundle\Shared\EventListener\LoggingSubscriber:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
            - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }